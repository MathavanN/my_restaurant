name: Build and Release on Main

on:
  pull_request:
    branches: [ main ]
    types: [closed]

jobs:
  check:
    name: Check PR merged Status and Label
    runs-on: ubuntu-latest
    outputs:
      pr_merged: ${{ steps.pr_status.outputs.PR_MERGED }}
      pr_label_has_safe_to_release: ${{ steps.pr_status.outputs.PR_LABEL_HAS_SAFE_TO_RELEASE }}
      current_branch: ${{ steps.pr_status.outputs.CURRENT_BRANCH }}
      event_number: ${{ steps.pr_status.outputs.EVENT_NUMBER }}
    steps:
      - uses: actions/checkout@v2
      - name: Set PR Status
        id: pr_status
        run: |
          echo ::set-output name=PR_MERGED::${{github.event.pull_request.merged}}
          echo ::set-output name=PR_LABEL_HAS_SAFE_TO_RELEASE::${{ contains(github.event.pull_request.labels.*.name, 'safe to release') }}
          echo ::set-output name=CURRENT_BRANCH::${GITHUB_REF#refs/*/}
          echo ::set-output name=EVENT_NUMBER::${{ github.event.number }}
      - name: Display PR Status
        run: |
          echo ${{ steps.pr_status.outputs.PR_MERGED }}
          echo ${{ steps.pr_status.outputs.PR_LABEL_HAS_SAFE_TO_RELEASE }}
          echo ${{ steps.pr_status.outputs.CURRENT_BRANCH }}
          echo ${{ steps.pr_status.outputs.EVENT_NUMBER }}
  
  build:
    name: Build the app
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.201
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Test
        run: dotnet test --filter FullyQualifiedName!~SeedData --no-restore --verbosity normal

  tag: 
    name: Create a tag
    needs: [check, build]
    env:
      working-directory: my_restaurant
      pr_merged: ${{ needs.check.outputs.pr_merged }}
      pr_label_has_safe_to_release: ${{ needs.check.outputs.pr_label_has_safe_to_release }}
      current_branch: ${{ needs.check.outputs.current_branch }}
      event_number: ${{ needs.check.outputs.event_number }}
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
      previous_tag: ${{ steps.tag_version.outputs.tag }}
      tag_part: ${{ steps.tag_version.outputs.part }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Create a tag
        if: ${{ env.pr_merged == 'true' }}
        id: tag_version
        uses: anothrNick/github-tag-action@1.35.0
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          RELEASE_BRANCHES: main
          TAG_CONTEXT: branch
          DEFAULT_BUMP: patch
          WITH_V: false
  
  release:
    name: Create single release for all build_release
    runs-on: ubuntu-latest
    needs: [check, build, tag]
    env:
      working-directory: my_restaurant
      pr_merged: ${{ needs.check.outputs.pr_merged }}
      pr_label_has_safe_to_release: ${{ needs.check.outputs.pr_label_has_safe_to_release }}
      new_tag: ${{ needs.tag.outputs.new_tag }}
      previous_tag: ${{ needs.tag.outputs.tag }}
      tag_part: ${{ needs.tag.outputs.part }}
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_created: ${{ steps.release_status.outputs.RELEASE_CREATED }}
    steps:
      - uses: actions/checkout@v2
      - name: Create a GitHub release
        uses: actions/create-release@v1
        if: ${{ env.pr_label_has_safe_to_release == 'true' }}
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}
          release_name: v${{ env.new_tag }}
          body_path: CHANGELOG.md
      - name: Set Release Status
        id: release_status
        run: |
          echo ::set-output name=RELEASE_CREATED::${{ env.pr_label_has_safe_to_release }}
      
  publish:
    name: Create cross-platform release builds, and upload binaries
    needs: [tag, release]
    runs-on: ${{ matrix.os }}
    env:
      working-directory: my_restaurant
      release_created: ${{ needs.release.outputs.release_created }}
      new_tag: ${{ needs.tag.outputs.new_tag }}
      version: ${{ needs.tag.outputs.new_tag }}
      upoad_url: ${{ needs.release.outputs.upload_url }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.new_tag }}
      - name: Setup .NET Core
        if: ${{ env.release_created == 'true' }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.201
      - name: Install dependencies
        if: ${{ env.release_created == 'true' }}
        run: dotnet restore
      - name: Build
        if: ${{ env.release_created == 'true' }}
        run: dotnet build -property:Version=${{ env.version }} --configuration Release --no-restore
      - name: Test
        if: ${{ env.release_created == 'true' }}
        run: dotnet test --filter FullyQualifiedName!~SeedData --no-restore --verbosity normal
      - name: Publish
        if: ${{ env.release_created == 'true' }}
        run: dotnet publish --no-build --configuration Release -o Release
      
      - name: Zip the asset into a zip file
        if: ${{ env.release_created == 'true' }}
        id: zip_asset
        run: |
          7z a -tzip my_restaurant-${{ matrix.os }}-v${{ env.version }}.zip Release*
      - name: Upload binaries to release
        uses: actions/upload-release-asset@v1
        if: ${{ env.release_created == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        with:
          upload_url: ${{ env.upoad_url }}
          asset_path: my_restaurant-${{ matrix.os }}-v${{ env.version }}.zip
          asset_name: my_restaurant-${{ matrix.os }}-v${{ env.version }}.zip
          asset_content_type: application/octet-stream
